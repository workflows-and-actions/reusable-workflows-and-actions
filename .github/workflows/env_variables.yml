name: Demo using env variables in a reusable workflow
on:
  workflow_call
env:
  # vars defined here are availble to all jobs, however, value updates will be available only 
  # within the job where they are updated
  globalvar: global_value
jobs:
  job1:
    name: j1 test env vars inside a job
    runs-on: ubuntu-latest
    env: 
      jobvar: this_is_jobvar
    steps:
      - name: test env variables
        env: 
          stepvar: this_is_stepvar
        run: |
         # inside a run, access env vars with or without env context
          echo $stepvar  
          echo ${{ env.stepvar }}
      - name: update env variables
      # these updates will be available only within the current job as we are saving in GITHUB_ENV
        run: |
          echo "stepvar=stepvar_new" >> $GITHUB_ENV
          echo "globalvar=globalvar_new" >> $GITHUB_ENV          
      - name: test updated env variables
        if: ${{ env.stepvar == 'stepvar_new' }} # we must accesss env vars using env context when outside a run
       # if: $stepvar == stepvar_new #     this will not work
       # if: ${{$stepvar == stepvar_new}} #     this will not work either
        run: |
          # inside a run we can access vars with or without env context
          echo $stepvar
          echo ${{ env.stepvar }}
          echo $globalvar
          echo ${{env.globalvar}}    
  job2:
    name: j2 show env vars behaviour across jobs
    runs-on: ubuntu-latest
    steps:
      - name: test env variables
        run: |
          # the following are not available acrosss jobs
          echo $stepvar
          echo ${{env.stepvar}} 
          echo $jobvar
          echo ${{env.jobvar}} 
          # global variable is available but the update done in another job will not affect it
          echo $globalvar
          echo ${{env.globalvar}}
          echo done with reusable workflow       
